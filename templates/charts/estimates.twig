{% extends "charts/layout.twig" %}

{% block title %}{{ parent() }} - Estimates Chart{% endblock %}

{% block content %}
    <div id="chart"></div>
    <div class="chart-caption">
        <a id='chart-refresh' href='#' class="disabled">Refresh</a> |
        <a id='chart-data' href="/data/estimates.json">JSON</a>
    </div>
{% endblock %}

{% block footerInlineScripts %}
    {{ parent() }}
    <script type="text/javascript">

        $(function () {
            var chart, chartData;
            var $chart = $('#chart');

            google.setOnLoadCallback(loadChart);

            var resizeTimeout = null;
            var resizeFunction = function () {
                Timing.start('chart.redraw');
                drawChart();
                Timing.stop('chart.redraw');

                if (typeof GoogleAnalyticsObject !== 'undefined') {
                    window[GoogleAnalyticsObject]('send', 'timing', 'chart', 'redraw', Timing.get('chart.redraw'), 'estimates');
                }
            };
            $(window).resize(function () {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(resizeFunction, 100);
            });

            $('#chart-refresh').click(function (event) {
                event.preventDefault();

                var $link = $(this);

                if ($link.hasClass('disabled')) {
                    return;
                }

                $link.addClass('disabled');
                $('#chart').fadeTo('fast', 0.2, loadChart);
            });

            function loadChart() {
                Timing.start('chart.loadData');

                $.get('/data/estimates.json', function (response, textStatus, jqXHR) {
                    Timing.stop('chart.loadData');
                    Timing.start('chart.processData');

                    chartData = new google.visualization.DataTable();

                    chartData.addColumn('datetime', 'Time');
                    chartData.addColumn('datetime', 'Estimates');

                    var data = response.data;

                    for (var i in data) {

                        if (data[i].estimate !== null && data[i].estimate !== '0000-00-00') {

                            var when = new Date(data[i].when);
                            var timezoneOffsetHours = (when.getTimezoneOffset() / -60).toString().replace(/^(-?)(\d)$/, '$10$2');
                            var timezoneOffsetMins = (when.getTimezoneOffset() % 60).toString().replace(/^(\d)$/, '0$1');
                            var timezoneOffsetString = (when.getTimezoneOffset()?'':'+' ) + timezoneOffsetHours + timezoneOffsetMins;
                            var estimateDateString = data[i].estimate.replace(/^(\d{4}-\d{2}-\d{2})$/, '$1T00:00:00' + timezoneOffsetString);
                            var estimateDate = new Date(estimateDateString);

                            chartData.addRow([
                                when,
                                {
                                    v: estimateDate,
                                    f: estimateDate.toDateString()
                                }
                            ]);
                        }
                    }
                    Timing.stop('chart.processData');

                    Timing.start('chart.firstDraw');
                    drawChart();
                    Timing.stop('chart.firstDraw');

                    if (typeof GoogleAnalyticsObject !== 'undefined') {
                        window[GoogleAnalyticsObject]('send', 'timing', 'data', 'load', Timing.get('chart.loadData'), 'estimates');
                        window[GoogleAnalyticsObject]('send', 'timing', 'chart', 'processData', Timing.get('chart.processData'), 'estimates');
                        window[GoogleAnalyticsObject]('send', 'timing', 'chart', 'firstDraw', Timing.get('chart.firstDraw'), 'estimates');
                    }

                    $('#chart-refresh').removeClass('disabled');
                    $('#chart').fadeTo('fast', 1);
                });
            }

            function drawChart() {
                if (chart) {
                    chart.clearChart();
                    $chart.css('height', '');
                }
                else {
                    chart = new google.visualization.ScatterChart($chart.get(0));
                }

                $chart.css('height', ($(document).height() * 0.8));

                chart.draw(
                    chartData,
                    {
                        title: 'Estimate',
                        legend: 'none'
                    }
                );
            }
        });
    </script>
{% endblock %}
