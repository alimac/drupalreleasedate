{% extends "layout.twig" %}

{% block content %}
    <div class="hero-unit">
        <h1>Drupal 8 Release</h1>
        <section class="estimate">
            Estimated to occur on
            <h2 class="value">?</h2>

            <div class="note"></div>
        </section>

        <section class="changes">
            <h4>Issue Changes</h4>
            <table>
                <thead>
                    <tr>
                        <th></th>
                        <th>Critical</th>
                        <th>Major</th>
                        <th>Normal</th>
                    </tr>
                </thead>
                <tbody>
                    <tr data-current>
                        <th>Current</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='day'>
                        <th>Day</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='week'>
                        <th>Week</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='month'>
                        <th>Month</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='quarter'>
                        <th>3 Month</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='half'>
                        <th>6 Month</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                    <tr data-period='year'>
                        <th>Year</th>
                        <td data-key='critical'>?</td>
                        <td data-key='major'>?</td>
                        <td data-key='normal'>?</td>
                    </tr>
                </tbody>
            </table>
        </section>
    </div>
{% endblock %}

{% block footerInlineScripts %}
    {{ parent() }}

    <script type="text/javascript">
        $(function () {
            function updateEstimate(estimate) {
                var estimate = estimate || {
                    value: 'N/A',
                    note: 'The latest estimate could not be retrieved'
                };
                $('.estimate .value').html(estimate.value);
                $('.estimate .note').html(estimate.note);
            }

            Timing.start('index.loadEstimate');
            $.getJSON('/data/estimates.json?limit=1')
                .done(function (response) {
                    Timing.stop('index.loadEstimate');

                    var estimate;
                    if (response.data && response.data[0]) {
                        if (response.data[0].estimate === null || response.data[0].estimate == '0000-00-00') {
                            estimate = {
                                value: 'N/A',
                                note: 'An estimate could not be calculated with the current data'
                            };
                        }
                        else {

                            var when = new Date(response.data[0].when);
                            // The estimate doesn't have a time component, so copy the timezone from the generation date.
                            var timezoneOffsetHours = Math.round(when.getTimezoneOffset() / -60).toString().replace(/^(-?)(\d)$/, '$10$2');
                            var timezoneOffsetMins = (when.getTimezoneOffset() % 60).toString().replace(/^(\d)$/, '0$1');
                            var timezoneOffsetString = (when.getTimezoneOffset() > 0?'':'+') + timezoneOffsetHours + ":" + timezoneOffsetMins;
                            var estimateDateString = response.data[0].estimate.replace(/^(\d{4}-\d{2}-\d{2})$/, '$1T00:00:00' + timezoneOffsetString);
                            var estimateDate = new Date(estimateDateString);
                            var estimateString = '';

                            if (window.Intl && typeof window.Intl === "object") {
                                estimateString = estimateDate.toLocaleDateString(
                                    'en-US',
                                    {
                                        month: 'long',
                                        day: 'numeric',
                                        year: 'numeric'
                                    }
                                );
                            }
                            else {
                                switch (estimateDate.getMonth()) {
                                    case 0:
                                        estimateString = 'January';
                                        break;
                                    case 1:
                                        estimateString = 'February';
                                        break;
                                    case 2:
                                        estimateString = 'March';
                                        break;
                                    case 3:
                                        estimateString = 'April';
                                        break;
                                    case 4:
                                        estimateString = 'May';
                                        break;
                                    case 5:
                                        estimateString = 'June';
                                        break;
                                    case 6:
                                        estimateString = 'July';
                                        break;
                                    case 7:
                                        estimateString = 'August';
                                        break;
                                    case 8:
                                        estimateString = 'September';
                                        break;
                                    case 9:
                                        estimateString = 'October';
                                        break;
                                    case 10:
                                        estimateString = 'November';
                                        break;
                                    case 11:
                                        estimateString = 'December';
                                        break;
                                }
                                estimateString += ' ' + estimateDate.getDate() + ', ' + estimateDate.getFullYear();
                            }

                            estimate = {
                                value: estimateString,
                                note: ''
                            };
                        }
                    }
                    updateEstimate(estimate);

                    if (typeof GoogleAnalyticsObject !== 'undefined') {
                        window[GoogleAnalyticsObject]('send', 'timing', 'data', 'load', Timing.get('index.loadEstimate'), 'estimates');
                    }
                })
                .fail(function () {
                    updateEstimate();
                });

            var historicalSamplesMapping = {
                'critical': function (data) {
                    if (
                        typeof data.critical_tasks === 'undefined' ||
                        data.critical_tasks === null ||
                        typeof data.critical_bugs === 'undefined' ||
                        data.critical_bugs === null
                    ) {
                        return null;
                    }
                    return data.critical_tasks + data.critical_bugs;
                },
                'major': function (data) {
                    if (
                        typeof data.major_tasks === 'undefined' ||
                        data.major_tasks === null ||
                        typeof data.major_bugs === 'undefined' ||
                        data.major_bugs === null
                    ) {
                        return null;
                    }
                    return data.major_tasks + data.major_bugs;
                },
                'normal': function (data) {
                    if (
                        typeof data.normal_tasks === 'undefined' ||
                        data.normal_tasks === null ||
                        typeof data.normal_bugs === 'undefined' ||
                        data.normal_bugs === null
                    ) {
                        return null;
                    }
                    return data.normal_tasks + data.normal_bugs;
                },
            };
            Timing.start('index.loadHistoricalSamples');
            $.getJSON('/data/historical-samples.json').done(function (response) {
                Timing.stop('index.loadHistoricalSamples');

                $('.changes [data-current] td[data-key]').each(function () {
                    var key = $(this).data('key');
                    var value = historicalSamplesMapping[key](response.data.current)
                    if (value) {
                        $(this).html(value);
                    }
                });

                $('.changes [data-period]').each(function () {
                    var period = $(this).data('period');

                    if (typeof response.data[period] === 'undefined') {
                        return;
                    }

                    $(this).find('td[data-key]').each(function () {
                        var key = $(this).data('key');
                        var currentValue = historicalSamplesMapping[key](response.data.current);
                        var pastValue = historicalSamplesMapping[key](response.data[period]);

                        if (currentValue !== null && pastValue !== null) {
                            var delta = currentValue - pastValue;
                            var deltaPercent = (delta / pastValue * 100).toPrecision(2);

                            if (delta > 0) {
                                delta = '+' + delta;
                                deltaPercent = '+' + deltaPercent;
                                $(this).addClass('up');
                            }
                            else if (delta < 0) {
                                // Convert negative symbol to a 'minus' character so that it is read by screen readers in digit mode.
                                delta = '−' + delta.toString().slice(1);
                                $(this).addClass('down');
                            }

                            $(this)
                                .html(delta)
                                .attr('title', deltaPercent + '%');
                        }

                    });
                });

                if (typeof GoogleAnalyticsObject !== 'undefined') {
                    window[GoogleAnalyticsObject]('send', 'timing', 'data', 'load', Timing.get('index.loadHistoricalSamples'), 'historical-samples');
                }
            });
        });
    </script>
{% endblock %}
